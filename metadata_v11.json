{
    "magicNumber":1635018093,
    "metadata":{
        "V11":{
            "modules":[
                {
                    "name":"System",
                    "storage":{
                        "prefix":"System",
                        "items":[
                            {
                                "name":"Account",
                                "modifier":"Default",
                                "type":{
                                    "Map":{
                                        "hasher":"Blake2_128Concat",
                                        "key":"AccountId",
                                        "value":"AccountInfo",
                                        "linked":false
                                    }
                                },
                                "fallback":"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                                "documentation":[
                                    " The full account information for a particular account ID."
                                ]
                            },
                            {
                                "name":"ExtrinsicCount",
                                "modifier":"Optional",
                                "type":{
                                    "Plain":"u32"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Total extrinsics count for the current block."
                                ]
                            },
                            {
                                "name":"AllExtrinsicsWeight",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"ExtrinsicsWeight"
                                },
                                "fallback":"0x00000000000000000000000000000000",
                                "documentation":[
                                    " Total weight for all extrinsics for the current block."
                                ]
                            },
                            {
                                "name":"AllExtrinsicsLen",
                                "modifier":"Optional",
                                "type":{
                                    "Plain":"u32"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Total length (in bytes) for all extrinsics put together, for the current block."
                                ]
                            },
                            {
                                "name":"BlockHash",
                                "modifier":"Default",
                                "type":{
                                    "Map":{
                                        "hasher":"Twox64Concat",
                                        "key":"BlockNumber",
                                        "value":"Hash",
                                        "linked":false
                                    }
                                },
                                "fallback":"0x0000000000000000000000000000000000000000000000000000000000000000",
                                "documentation":[
                                    " Map of block numbers to block hashes."
                                ]
                            },
                            {
                                "name":"ExtrinsicData",
                                "modifier":"Default",
                                "type":{
                                    "Map":{
                                        "hasher":"Twox64Concat",
                                        "key":"u32",
                                        "value":"Bytes",
                                        "linked":false
                                    }
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                                ]
                            },
                            {
                                "name":"Number",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"BlockNumber"
                                },
                                "fallback":"0x00000000",
                                "documentation":[
                                    " The current block number being processed. Set by `execute_block`."
                                ]
                            },
                            {
                                "name":"ParentHash",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"Hash"
                                },
                                "fallback":"0x0000000000000000000000000000000000000000000000000000000000000000",
                                "documentation":[
                                    " Hash of the previous block."
                                ]
                            },
                            {
                                "name":"ExtrinsicsRoot",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"Hash"
                                },
                                "fallback":"0x0000000000000000000000000000000000000000000000000000000000000000",
                                "documentation":[
                                    " Extrinsics root of the current block, also part of the block header."
                                ]
                            },
                            {
                                "name":"Digest",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"DigestOf"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Digest of the current block, also part of the block header."
                                ]
                            },
                            {
                                "name":"Events",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"Vec<EventRecord>"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Events deposited for the current block."
                                ]
                            },
                            {
                                "name":"EventCount",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"EventIndex"
                                },
                                "fallback":"0x00000000",
                                "documentation":[
                                    " The number of events in the `Events<T>` list."
                                ]
                            },
                            {
                                "name":"EventTopics",
                                "modifier":"Default",
                                "type":{
                                    "Map":{
                                        "hasher":"Blake2_128Concat",
                                        "key":"Hash",
                                        "value":"Vec<(BlockNumber,EventIndex)>",
                                        "linked":false
                                    }
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                                    " of events in the `<Events<T>>` list.",
                                    "",
                                    " All topic vectors have deterministic storage locations depending on the topic. This",
                                    " allows light-clients to leverage the changes trie storage tracking mechanism and",
                                    " in case of changes fetch the list of events of interest.",
                                    "",
                                    " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                                    " the `EventIndex` then in case if the topic has the same contents on the next block",
                                    " no notification will be triggered thus the event might be lost."
                                ]
                            },
                            {
                                "name":"LastRuntimeUpgrade",
                                "modifier":"Optional",
                                "type":{
                                    "Plain":"LastRuntimeUpgradeInfo"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                                ]
                            },
                            {
                                "name":"ExecutionPhase",
                                "modifier":"Optional",
                                "type":{
                                    "Plain":"Phase"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " The execution phase of the block."
                                ]
                            }
                        ]
                    },
                    "calls":[
                        {
                            "name":"fill_block",
                            "args":[
                                {
                                    "name":"_ratio",
                                    "type":"Perbill"
                                }
                            ],
                            "documentation":[
                                " A dispatch that will fill the block weight up to the given ratio."
                            ]
                        },
                        {
                            "name":"remark",
                            "args":[
                                {
                                    "name":"_remark",
                                    "type":"Bytes"
                                }
                            ],
                            "documentation":[
                                " Make some on-chain remark.",
                                "",
                                " # <weight>",
                                " - `O(1)`",
                                " - Base Weight: 0.665 µs, independent of remark length.",
                                " - No DB operations.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"set_heap_pages",
                            "args":[
                                {
                                    "name":"pages",
                                    "type":"u64"
                                }
                            ],
                            "documentation":[
                                " Set the number of pages in the WebAssembly environment's heap.",
                                "",
                                " # <weight>",
                                " - `O(1)`",
                                " - 1 storage write.",
                                " - Base Weight: 1.405 µs",
                                " - 1 write to HEAP_PAGES",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"set_code",
                            "args":[
                                {
                                    "name":"code",
                                    "type":"Bytes"
                                }
                            ],
                            "documentation":[
                                " Set the new runtime code.",
                                "",
                                " # <weight>",
                                " - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                                " - 1 storage write (codec `O(C)`).",
                                " - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).",
                                " - 1 event.",
                                " The weight of this function is dependent on the runtime, but generally this is very expensive.",
                                " We will treat this as a full block.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"set_code_without_checks",
                            "args":[
                                {
                                    "name":"code",
                                    "type":"Bytes"
                                }
                            ],
                            "documentation":[
                                " Set the new runtime code without doing any checks of the given `code`.",
                                "",
                                " # <weight>",
                                " - `O(C)` where `C` length of `code`",
                                " - 1 storage write (codec `O(C)`).",
                                " - 1 event.",
                                " The weight of this function is dependent on the runtime. We will treat this as a full block.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"set_changes_trie_config",
                            "args":[
                                {
                                    "name":"changes_trie_config",
                                    "type":"Option<ChangesTrieConfiguration>"
                                }
                            ],
                            "documentation":[
                                " Set the new changes trie configuration.",
                                "",
                                " # <weight>",
                                " - `O(1)`",
                                " - 1 storage write or delete (codec `O(1)`).",
                                " - 1 call to `deposit_log`: Uses `append` API, so O(1)",
                                " - Base Weight: 7.218 µs",
                                " - DB Weight:",
                                "     - Writes: Changes Trie, System Digest",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"set_storage",
                            "args":[
                                {
                                    "name":"items",
                                    "type":"Vec<KeyValue>"
                                }
                            ],
                            "documentation":[
                                " Set some items of storage.",
                                "",
                                " # <weight>",
                                " - `O(I)` where `I` length of `items`",
                                " - `I` storage writes (`O(1)`).",
                                " - Base Weight: 0.568 * i µs",
                                " - Writes: Number of items",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"kill_storage",
                            "args":[
                                {
                                    "name":"keys",
                                    "type":"Vec<Key>"
                                }
                            ],
                            "documentation":[
                                " Kill some items from storage.",
                                "",
                                " # <weight>",
                                " - `O(IK)` where `I` length of `keys` and `K` length of one key",
                                " - `I` storage deletions.",
                                " - Base Weight: .378 * i µs",
                                " - Writes: Number of items",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"kill_prefix",
                            "args":[
                                {
                                    "name":"prefix",
                                    "type":"Key"
                                },
                                {
                                    "name":"_subkeys",
                                    "type":"u32"
                                }
                            ],
                            "documentation":[
                                " Kill all storage items with a key that starts with the given prefix.",
                                "",
                                " **NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                                " the prefix we are removing to accurately calculate the weight of this function.",
                                "",
                                " # <weight>",
                                " - `O(P)` where `P` amount of keys with prefix `prefix`",
                                " - `P` storage deletions.",
                                " - Base Weight: 0.834 * P µs",
                                " - Writes: Number of subkeys + 1",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"suicide",
                            "args":[

                            ],
                            "documentation":[
                                " Kill the sending account, assuming there are no references outstanding and the composite",
                                " data is equal to its default value.",
                                "",
                                " # <weight>",
                                " - `O(1)`",
                                " - 1 storage read and deletion.",
                                " --------------------",
                                " Base Weight: 8.626 µs",
                                " No DB Read or Write operations because caller is already in overlay",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events":[
                        {
                            "name":"ExtrinsicSuccess",
                            "args":[
                                "DispatchInfo"
                            ],
                            "documentation":[
                                " An extrinsic completed successfully."
                            ]
                        },
                        {
                            "name":"ExtrinsicFailed",
                            "args":[
                                "DispatchError",
                                "DispatchInfo"
                            ],
                            "documentation":[
                                " An extrinsic failed."
                            ]
                        },
                        {
                            "name":"CodeUpdated",
                            "args":[

                            ],
                            "documentation":[
                                " `:code` was updated."
                            ]
                        },
                        {
                            "name":"NewAccount",
                            "args":[
                                "AccountId"
                            ],
                            "documentation":[
                                " A new account was created."
                            ]
                        },
                        {
                            "name":"KilledAccount",
                            "args":[
                                "AccountId"
                            ],
                            "documentation":[
                                " An account was reaped."
                            ]
                        }
                    ],
                    "constants":[
                        {
                            "name":"BlockHashCount",
                            "type":"BlockNumber",
                            "value":"0x60090000",
                            "documentation":[
                                " The maximum number of blocks to allow in mortal eras."
                            ]
                        },
                        {
                            "name":"MaximumBlockWeight",
                            "type":"Weight",
                            "value":"0x00204aa9d1010000",
                            "documentation":[
                                " The maximum weight of a block."
                            ]
                        },
                        {
                            "name":"DbWeight",
                            "type":"RuntimeDbWeight",
                            "value":"0x40787d010000000000e1f50500000000",
                            "documentation":[
                                " The weight of runtime database operations the runtime can invoke."
                            ]
                        },
                        {
                            "name":"BlockExecutionWeight",
                            "type":"Weight",
                            "value":"0x00f2052a01000000",
                            "documentation":[
                                " The base weight of executing a block, independent of the transactions in the block."
                            ]
                        },
                        {
                            "name":"ExtrinsicBaseWeight",
                            "type":"Weight",
                            "value":"0x4059730700000000",
                            "documentation":[
                                " The base weight of an Extrinsic in the block, independent of the of extrinsic being executed."
                            ]
                        },
                        {
                            "name":"MaximumBlockLength",
                            "type":"u32",
                            "value":"0x00005000",
                            "documentation":[
                                " The maximum length of a block (in bytes)."
                            ]
                        }
                    ],
                    "errors":[
                        {
                            "name":"InvalidSpecName",
                            "documentation":[
                                " The name of specification does not match between the current runtime",
                                " and the new runtime."
                            ]
                        },
                        {
                            "name":"SpecVersionNeedsToIncrease",
                            "documentation":[
                                " The specification version is not allowed to decrease between the current runtime",
                                " and the new runtime."
                            ]
                        },
                        {
                            "name":"FailedToExtractRuntimeVersion",
                            "documentation":[
                                " Failed to extract the runtime version from the new runtime.",
                                "",
                                " Either calling `Core_version` or decoding `RuntimeVersion` failed."
                            ]
                        },
                        {
                            "name":"NonDefaultComposite",
                            "documentation":[
                                " Suicide called when the account has non-default composite data."
                            ]
                        },
                        {
                            "name":"NonZeroRefCount",
                            "documentation":[
                                " There is a non-zero reference count preventing the account from being purged."
                            ]
                        }
                    ]
                },
                {
                    "name":"RandomnessCollectiveFlip",
                    "storage":{
                        "prefix":"RandomnessCollectiveFlip",
                        "items":[
                            {
                                "name":"RandomMaterial",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"Vec<Hash>"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Series of block headers from the last 81 blocks that acts as random seed material. This",
                                    " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                                    " the oldest hash."
                                ]
                            }
                        ]
                    },
                    "calls":[

                    ],
                    "events":null,
                    "constants":[

                    ],
                    "errors":[

                    ]
                },
                {
                    "name":"Timestamp",
                    "storage":{
                        "prefix":"Timestamp",
                        "items":[
                            {
                                "name":"Now",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"Moment"
                                },
                                "fallback":"0x0000000000000000",
                                "documentation":[
                                    " Current time for the current block."
                                ]
                            },
                            {
                                "name":"DidUpdate",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"bool"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Did the timestamp get updated in this block?"
                                ]
                            }
                        ]
                    },
                    "calls":[
                        {
                            "name":"set",
                            "args":[
                                {
                                    "name":"now",
                                    "type":"Compact<Moment>"
                                }
                            ],
                            "documentation":[
                                " Set the current time.",
                                "",
                                " This call should be invoked exactly once per block. It will panic at the finalization",
                                " phase, if this call hasn't been invoked by that time.",
                                "",
                                " The timestamp should be greater than the previous one by the amount specified by",
                                " `MinimumPeriod`.",
                                "",
                                " The dispatch origin for this call must be `Inherent`.",
                                "",
                                " # <weight>",
                                " - `O(T)` where `T` complexity of `on_timestamp_set`",
                                " - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)",
                                " - 1 event handler `on_timestamp_set` `O(T)`.",
                                " - Benchmark: 7.678 (min squares analysis)",
                                "   - NOTE: This benchmark was done for a runtime with insignificant `on_timestamp_set` handlers.",
                                "     New benchmarking is needed when adding new handlers.",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events":null,
                    "constants":[
                        {
                            "name":"MinimumPeriod",
                            "type":"Moment",
                            "value":"0xb80b000000000000",
                            "documentation":[
                                " The minimum period between blocks. Beware that this is different to the *expected* period",
                                " that the block production apparatus provides. Your chosen consensus system will generally",
                                " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                                " period on default settings."
                            ]
                        }
                    ],
                    "errors":[

                    ]
                },
                {
                    "name":"Aura",
                    "storage":null,
                    "calls":null,
                    "events":null,
                    "constants":[

                    ],
                    "errors":[

                    ]
                },
                {
                    "name":"Grandpa",
                    "storage":{
                        "prefix":"GrandpaFinality",
                        "items":[
                            {
                                "name":"State",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"StoredState"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " State of the current authority set."
                                ]
                            },
                            {
                                "name":"PendingChange",
                                "modifier":"Optional",
                                "type":{
                                    "Plain":"StoredPendingChange"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Pending change: (signaled at, scheduled change)."
                                ]
                            },
                            {
                                "name":"NextForced",
                                "modifier":"Optional",
                                "type":{
                                    "Plain":"BlockNumber"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " next block number where we can force a change."
                                ]
                            },
                            {
                                "name":"Stalled",
                                "modifier":"Optional",
                                "type":{
                                    "Plain":"(BlockNumber,BlockNumber)"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " `true` if we are currently stalled."
                                ]
                            },
                            {
                                "name":"CurrentSetId",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"SetId"
                                },
                                "fallback":"0x0000000000000000",
                                "documentation":[
                                    " The number of changes (both in terms of keys and underlying economic responsibilities)",
                                    " in the "set" of Grandpa validators from genesis."
                                ]
                            },
                            {
                                "name":"SetIdSession",
                                "modifier":"Optional",
                                "type":{
                                    "Map":{
                                        "hasher":"Twox64Concat",
                                        "key":"SetId",
                                        "value":"SessionIndex",
                                        "linked":false
                                    }
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                                    " members were responsible."
                                ]
                            }
                        ]
                    },
                    "calls":[
                        {
                            "name":"report_equivocation",
                            "args":[
                                {
                                    "name":"equivocation_proof",
                                    "type":"EquivocationProof"
                                },
                                {
                                    "name":"key_owner_proof",
                                    "type":"KeyOwnerProof"
                                }
                            ],
                            "documentation":[
                                " Report voter equivocation/misbehavior. This method will verify the",
                                " equivocation proof and validate the given key ownership proof",
                                " against the extracted offender. If both are valid, the offence",
                                " will be reported.",
                                "",
                                " Since the weight of the extrinsic is 0, in order to avoid DoS by",
                                " submission of invalid equivocation reports, a mandatory pre-validation of",
                                " the extrinsic is implemented in a `SignedExtension`."
                            ]
                        }
                    ],
                    "events":[
                        {
                            "name":"NewAuthorities",
                            "args":[
                                "AuthorityList"
                            ],
                            "documentation":[
                                " New authority set has been applied."
                            ]
                        },
                        {
                            "name":"Paused",
                            "args":[

                            ],
                            "documentation":[
                                " Current authority set has been paused."
                            ]
                        },
                        {
                            "name":"Resumed",
                            "args":[

                            ],
                            "documentation":[
                                " Current authority set has been resumed."
                            ]
                        }
                    ],
                    "constants":[

                    ],
                    "errors":[
                        {
                            "name":"PauseFailed",
                            "documentation":[
                                " Attempt to signal GRANDPA pause when the authority set isn't live",
                                " (either paused or already pending pause)."
                            ]
                        },
                        {
                            "name":"ResumeFailed",
                            "documentation":[
                                " Attempt to signal GRANDPA resume when the authority set isn't paused",
                                " (either live or already pending resume)."
                            ]
                        },
                        {
                            "name":"ChangePending",
                            "documentation":[
                                " Attempt to signal GRANDPA change with one already pending."
                            ]
                        },
                        {
                            "name":"TooSoon",
                            "documentation":[
                                " Cannot signal forced change so soon after last."
                            ]
                        },
                        {
                            "name":"InvalidKeyOwnershipProof",
                            "documentation":[
                                " A key ownership proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name":"DuplicateOffenceReport",
                            "documentation":[
                                " A given equivocation report is valid but already previously reported."
                            ]
                        }
                    ]
                },
                {
                    "name":"Balances",
                    "storage":{
                        "prefix":"Balances",
                        "items":[
                            {
                                "name":"TotalIssuance",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"Balance"
                                },
                                "fallback":"0x00000000000000000000000000000000",
                                "documentation":[
                                    " The total units issued in the system."
                                ]
                            },
                            {
                                "name":"Account",
                                "modifier":"Default",
                                "type":{
                                    "Map":{
                                        "hasher":"Blake2_128Concat",
                                        "key":"AccountId",
                                        "value":"AccountData",
                                        "linked":false
                                    }
                                },
                                "fallback":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                                "documentation":[
                                    " The balance of an account.",
                                    "",
                                    " NOTE: THIS MAY NEVER BE IN EXISTENCE AND YET HAVE A `total().is_zero()`. If the total",
                                    " is ever zero, then the entry *MUST* be removed.",
                                    "",
                                    " NOTE: This is only used in the case that this module is used to store balances."
                                ]
                            },
                            {
                                "name":"Locks",
                                "modifier":"Default",
                                "type":{
                                    "Map":{
                                        "hasher":"Blake2_128Concat",
                                        "key":"AccountId",
                                        "value":"Vec<BalanceLock>",
                                        "linked":false
                                    }
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Any liquidity locks on some account balances.",
                                    " NOTE: Should only be accessed when setting, changing and freeing a lock."
                                ]
                            },
                            {
                                "name":"StorageVersion",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"ReleasesBalances"
                                },
                                "fallback":"0x00",
                                "documentation":[
                                    " Storage version of the pallet.",
                                    "",
                                    " This is set to v2.0.0 for new networks."
                                ]
                            }
                        ]
                    },
                    "calls":[
                        {
                            "name":"transfer",
                            "args":[
                                {
                                    "name":"dest",
                                    "type":"LookupSource"
                                },
                                {
                                    "name":"value",
                                    "type":"Compact<Balance>"
                                }
                            ],
                            "documentation":[
                                " Transfer some liquid free balance to another account.",
                                "",
                                " `transfer` will set the `FreeBalance` of the sender and receiver.",
                                " It will decrease the total issuance of the system by the `TransferFee`.",
                                " If the sender's account is below the existential deposit as a result",
                                " of the transfer, the account will be reaped.",
                                "",
                                " The dispatch origin for this call must be `Signed` by the transactor.",
                                "",
                                " # <weight>",
                                " - Dependent on arguments but not critical, given proper implementations for",
                                "   input config types. See related functions below.",
                                " - It contains a limited number of reads and writes internally and no complex computation.",
                                "",
                                " Related functions:",
                                "",
                                "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                                "   - Transferring balances to accounts that did not exist before will cause",
                                "      `T::OnNewAccount::on_new_account` to be called.",
                                "   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                                "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                                "     check that the transfer will not kill the origin account.",
                                " ---------------------------------",
                                " - Base Weight: 73.64 µs, worst case scenario (account created, account removed)",
                                " - DB Weight: 1 Read and 1 Write to destination account",
                                " - Origin account is already in memory, so no DB operations for them.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"set_balance",
                            "args":[
                                {
                                    "name":"who",
                                    "type":"LookupSource"
                                },
                                {
                                    "name":"new_free",
                                    "type":"Compact<Balance>"
                                },
                                {
                                    "name":"new_reserved",
                                    "type":"Compact<Balance>"
                                }
                            ],
                            "documentation":[
                                " Set the balances of a given account.",
                                "",
                                " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                                " also decrease the total issuance of the system (`TotalIssuance`).",
                                " If the new free or reserved balance is below the existential deposit,",
                                " it will reset the account nonce (`frame_system::AccountNonce`).",
                                "",
                                " The dispatch origin for this call is `root`.",
                                "",
                                " # <weight>",
                                " - Independent of the arguments.",
                                " - Contains a limited number of reads and writes.",
                                " ---------------------",
                                " - Base Weight:",
                                "     - Creating: 27.56 µs",
                                "     - Killing: 35.11 µs",
                                " - DB Weight: 1 Read, 1 Write to `who`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"force_transfer",
                            "args":[
                                {
                                    "name":"source",
                                    "type":"LookupSource"
                                },
                                {
                                    "name":"dest",
                                    "type":"LookupSource"
                                },
                                {
                                    "name":"value",
                                    "type":"Compact<Balance>"
                                }
                            ],
                            "documentation":[
                                " Exactly as `transfer`, except the origin must be root and the source account may be",
                                " specified.",
                                " # <weight>",
                                " - Same as transfer, but additional read and write because the source account is",
                                "   not assumed to be in the overlay.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"transfer_keep_alive",
                            "args":[
                                {
                                    "name":"dest",
                                    "type":"LookupSource"
                                },
                                {
                                    "name":"value",
                                    "type":"Compact<Balance>"
                                }
                            ],
                            "documentation":[
                                " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                                " origin account.",
                                "",
                                " 99% of the time you want [`transfer`] instead.",
                                "",
                                " [`transfer`]: struct.Module.html#method.transfer",
                                " # <weight>",
                                " - Cheaper than transfer because account cannot be killed.",
                                " - Base Weight: 51.4 µs",
                                " - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
                                " #</weight>"
                            ]
                        }
                    ],
                    "events":[
                        {
                            "name":"Endowed",
                            "args":[
                                "AccountId",
                                "Balance"
                            ],
                            "documentation":[
                                " An account was created with some free balance."
                            ]
                        },
                        {
                            "name":"DustLost",
                            "args":[
                                "AccountId",
                                "Balance"
                            ],
                            "documentation":[
                                " An account was removed whose balance was non-zero but below ExistentialDeposit,",
                                " resulting in an outright loss."
                            ]
                        },
                        {
                            "name":"Transfer",
                            "args":[
                                "AccountId",
                                "AccountId",
                                "Balance"
                            ],
                            "documentation":[
                                " Transfer succeeded (from, to, value)."
                            ]
                        },
                        {
                            "name":"BalanceSet",
                            "args":[
                                "AccountId",
                                "Balance",
                                "Balance"
                            ],
                            "documentation":[
                                " A balance was set by root (who, free, reserved)."
                            ]
                        },
                        {
                            "name":"Deposit",
                            "args":[
                                "AccountId",
                                "Balance"
                            ],
                            "documentation":[
                                " Some amount was deposited (e.g. for transaction fees)."
                            ]
                        }
                    ],
                    "constants":[
                        {
                            "name":"ExistentialDeposit",
                            "type":"Balance",
                            "value":"0xf4010000000000000000000000000000",
                            "documentation":[
                                " The minimum amount required to keep an account open."
                            ]
                        }
                    ],
                    "errors":[
                        {
                            "name":"VestingBalance",
                            "documentation":[
                                " Vesting balance too high to send value"
                            ]
                        },
                        {
                            "name":"LiquidityRestrictions",
                            "documentation":[
                                " Account liquidity restrictions prevent withdrawal"
                            ]
                        },
                        {
                            "name":"Overflow",
                            "documentation":[
                                " Got an overflow after adding"
                            ]
                        },
                        {
                            "name":"InsufficientBalance",
                            "documentation":[
                                " Balance too low to send value"
                            ]
                        },
                        {
                            "name":"ExistentialDeposit",
                            "documentation":[
                                " Value too low to create account due to existential deposit"
                            ]
                        },
                        {
                            "name":"KeepAlive",
                            "documentation":[
                                " Transfer/payment would kill account"
                            ]
                        },
                        {
                            "name":"ExistingVestingSchedule",
                            "documentation":[
                                " A vesting schedule already exists for this account"
                            ]
                        },
                        {
                            "name":"DeadAccount",
                            "documentation":[
                                " Beneficiary account must pre-exist"
                            ]
                        }
                    ]
                },
                {
                    "name":"TransactionPayment",
                    "storage":{
                        "prefix":"TransactionPayment",
                        "items":[
                            {
                                "name":"NextFeeMultiplier",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"Multiplier"
                                },
                                "fallback":"0x00000000000000000000000000000000",
                                "documentation":[

                                ]
                            }
                        ]
                    },
                    "calls":null,
                    "events":null,
                    "constants":[
                        {
                            "name":"TransactionByteFee",
                            "type":"BalanceOf",
                            "value":"0x01000000000000000000000000000000",
                            "documentation":[
                                " The fee to be paid for making a transaction; the per-byte portion."
                            ]
                        }
                    ],
                    "errors":[

                    ]
                },
                {
                    "name":"Sudo",
                    "storage":{
                        "prefix":"Sudo",
                        "items":[
                            {
                                "name":"Key",
                                "modifier":"Default",
                                "type":{
                                    "Plain":"AccountId"
                                },
                                "fallback":"0x0000000000000000000000000000000000000000000000000000000000000000",
                                "documentation":[
                                    " The `AccountId` of the sudo key."
                                ]
                            }
                        ]
                    },
                    "calls":[
                        {
                            "name":"sudo",
                            "args":[
                                {
                                    "name":"call",
                                    "type":"Call"
                                }
                            ],
                            "documentation":[
                                " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - O(1).",
                                " - Limited storage reads.",
                                " - One DB write (event).",
                                " - Weight of derivative `call` execution + 10,000.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"sudo_unchecked_weight",
                            "args":[
                                {
                                    "name":"call",
                                    "type":"Call"
                                },
                                {
                                    "name":"_weight",
                                    "type":"Weight"
                                }
                            ],
                            "documentation":[
                                " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                                " This function does not check the weight of the call, and instead allows the",
                                " Sudo user to specify the weight of the call.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - O(1).",
                                " - The weight of this call is defined by the caller.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"set_key",
                            "args":[
                                {
                                    "name":"new",
                                    "type":"LookupSource"
                                }
                            ],
                            "documentation":[
                                " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - O(1).",
                                " - Limited storage reads.",
                                " - One DB change.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name":"sudo_as",
                            "args":[
                                {
                                    "name":"who",
                                    "type":"LookupSource"
                                },
                                {
                                    "name":"call",
                                    "type":"Call"
                                }
                            ],
                            "documentation":[
                                " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                                " a given account.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - O(1).",
                                " - Limited storage reads.",
                                " - One DB write (event).",
                                " - Weight of derivative `call` execution + 10,000.",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events":[
                        {
                            "name":"Sudid",
                            "args":[
                                "DispatchResult"
                            ],
                            "documentation":[
                                " A sudo just took place."
                            ]
                        },
                        {
                            "name":"KeyChanged",
                            "args":[
                                "AccountId"
                            ],
                            "documentation":[
                                " The sudoer just switched identity; the old key is supplied."
                            ]
                        },
                        {
                            "name":"SudoAsDone",
                            "args":[
                                "bool"
                            ],
                            "documentation":[
                                " A sudo just took place."
                            ]
                        }
                    ],
                    "constants":[

                    ],
                    "errors":[
                        {
                            "name":"RequireSudo",
                            "documentation":[
                                " Sender must be the Sudo account"
                            ]
                        }
                    ]
                },
                {
                    "name":"TemplateModule",
                    "storage":{
                        "prefix":"TemplateModule",
                        "items":[
                            {
                                "name":"Something",
                                "modifier":"Optional",
                                "type":{
                                    "Plain":"u32"
                                },
                                "fallback":"0x00",
                                "documentation":[

                                ]
                            }
                        ]
                    },
                    "calls":[
                        {
                            "name":"do_something",
                            "args":[
                                {
                                    "name":"something",
                                    "type":"u32"
                                }
                            ],
                            "documentation":[
                                " Just a dummy entry point.",
                                " function that can be called by the external world as an extrinsics call",
                                " takes a parameter of the type `AccountId`, stores it, and emits an event"
                            ]
                        },
                        {
                            "name":"cause_error",
                            "args":[

                            ],
                            "documentation":[
                                " Another dummy entry point.",
                                " takes no parameters, attempts to increment storage value, and possibly throws an error"
                            ]
                        }
                    ],
                    "events":[
                        {
                            "name":"SomethingStored",
                            "args":[
                                "u32",
                                "AccountId"
                            ],
                            "documentation":[
                                " Just a dummy event.",
                                " Event `Something` is declared with a parameter of the type `u32` and `AccountId`",
                                " To emit this event, we call the deposit function, from our runtime functions"
                            ]
                        }
                    ],
                    "constants":[

                    ],
                    "errors":[
                        {
                            "name":"NoneValue",
                            "documentation":[
                                " Value was None"
                            ]
                        },
                        {
                            "name":"StorageOverflow",
                            "documentation":[
                                " Value reached maximum and cannot be incremented further"
                            ]
                        }
                    ]
                }
            ],
            "extrinsic":{
                "version":4,
                "signedExtensions":[
                    "CheckSpecVersion",
                    "CheckTxVersion",
                    "CheckGenesis",
                    "CheckEra",
                    "CheckNonce",
                    "CheckWeight",
                    "ChargeTransactionPayment"
                ]
            }
        }
    }
}